// 1st-Method (Bayer's Moore )

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n=nums.size()/3;
        int cnt1=0,cnt2=0,count1=-1,count2=-1;
        vector<int> ans;
        for(auto num : nums){
            if(num==count1)
            cnt1++;
            else if(num==count2)
            cnt2++;
            else if(cnt1==0){
                count1=num;
                cnt1=1;
            }
            else if(cnt2==0){
                count2=num;
                cnt2=1;
            }
            else {
                cnt1--;
                cnt2--;
            }
        }
         cnt1=cnt2=0;
        for(auto num : nums){
            if(num==count1)
            cnt1++;
            else if(num==count2)
            cnt2++;
        }
        if(cnt1>n)
        ans.push_back(count1);
        if(cnt2>n)
        ans.push_back(count2);
        return ans;
    }
};

// 2st-Method

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n=nums.size()/3;
        vector<int> ans;
        unordered_map<int,int> mp;
        for(auto &it:nums){
            mp[it]++;
            
        }
        for(auto it:mp){
            if(it.second>n)
            ans.push_back(it.first);
        }
        return ans;
    }
};
